/*
  Copyright Jes√∫s Rubio <jesusprubio@gmail.com>

  This code may only be used under the MIT license found at
  https://opensource.org/licenses/MIT.
*/

/* eslint-disable no-console */

'use strict';

const assert = require('assert');

const client = require('../..');
const utilsTest = require('../utils');

let firstNoPages;
let apiKey;
if (process.env.KEY_TEST) {
  apiKey = process.env.KEY_TEST;
}

describe('exploits.search', () => {
  it('should fail if "query" parameter no present', async () =>
    utilsTest.throwsAsync(
      () => client.exploits.search(),
      /Required parameter: query/,
    ));

  it('should fail if "key" parameter no present', async () =>
    utilsTest.throwsAsync(
      () => client.exploits.search('asterisk'),
      /You must provide a valid API key/,
    ));

  it('should fail if the HTTP request fails', async function t() {
    utilsTest.insist(this);
    utilsTest.throwsAsync(
      () => client.exploits.search('asterisk', 'a'),
      /got.get : Response code 401/,
    );
  });

  // TODO: Mocha automagically added stuff to this.* not supported with arrow functions.
  // https://github.com/mochajs/mocha/issues/1856
  // it('should return a lot for a common service', async () => {
  it('should return a lot for a common service', async function t() {
    if (!apiKey) {
      this.skip();
    }
    utilsTest.insist(this);

    const res = await client.exploits.search('asterisk', apiKey);

    assert.ok(res.matches.length > 10);
    assert.deepEqual(Object.keys(res), ['matches', 'total']);
    assert.deepEqual(Object.keys(res.matches[0]), [
      'source',
      '_id',
      'description',
      'osvdb',
      'bid',
      'cve',
      'msb',
    ]);

    // To compare later.
    // eslint-disable-next-line no-underscore-dangle
    firstNoPages = res.matches[0]._id;
  });

  it('should return 0 for a non existent service', async function t() {
    if (!apiKey) {
      this.skip();
    }
    utilsTest.insist(this);

    const res = await client.exploits.search('nonexistentservice', apiKey);

    assert.equal(res.matches.length, 0);
  });

  it('should return a different first one for the same service but using "page" option', async function t() {
    if (!apiKey) {
      this.skip();
    }
    utilsTest.insist(this);

    const res = await client.exploits.search('asterisk', apiKey, {
      page: 2,
    });

    assert.deepEqual(Object.keys(res), ['matches', 'total']);
    // eslint-disable-next-line no-underscore-dangle
    assert.notEqual(res.matches[0]._id, firstNoPages);
  });

  it('should return a different response using "facets" option', async function t() {
    if (!apiKey) {
      this.skip();
    }
    utilsTest.insist(this);

    const res = await client.exploits.search('asterisk', apiKey, {
      facets: 'author',
    });

    assert.deepEqual(Object.keys(res), ['matches', 'facets', 'total']);
  });

  it('should have into account the "timeout" option', async function t() {
    utilsTest.insist(this);
    utilsTest.throwsAsync(
      () => client.exploits.search('asterisk', 'a', { timeout: 1 }),
      /got.get : Timeout awaiting/,
    );
  });
});
